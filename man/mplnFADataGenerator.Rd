% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mplnFAsimulate.R
\name{mplnFADataGenerator}
\alias{mplnFADataGenerator}
\title{Generating Data Using Mixture of MPLN Factor Analyzers}
\usage{
mplnFADataGenerator(
  numDatasets = 10,
  nObservations = 1000,
  dimensionality = 10,
  mixingProportions = c(0.32, 0.68),
  trueClusters = 2,
  pfactors = 3,
  modelName = "CCC",
  mu = list(c(6, 3, 3, 6, 3, 6, 3, 3, 6, 3), c(5, 3, 5, 3, 5, 5, 3, 5, 3, 5)),
  Lambda = list(matrix(runif(3 * 10, -1, 1), nrow = 10), matrix(runif(3 * 10, -1, 1),
    nrow = 10)),
  Psi = list(diag(10) * runif(1), diag(10) * runif(1))
)
}
\arguments{
\item{numDatasets}{A positive integer indicating the number
of datasets to be generated. Default value is 10.}

\item{nObservations}{A positive integer indicating the number
of observations for the dataset. Or the sample size. Default
value is 1000.}

\item{dimensionality}{A positive integer indicating the
dimensionality for the dataset. Default value is 10.}

\item{trueClusters}{A positive integer indicating the number
of total components or clusters. Default value is 2.}

\item{pfactors}{A positive integer indicating the number
of total latent factors. Default value is 3.}

\item{mu}{A matrix of size (dimensionality x number of components), indicating
the mean for each component. See example.}

\item{modelNames}{A character string indicating the model name to generate
covariance matrix, Sigma. Since the largest contribution of free parameters
is through the covariance matrices, it is the focus for introduction
of parsimony. The constraints can be imposed on Lambda (loading matrix)
and Psi (error variance and isotropic) which are used to generate Sigma.
The 'C' stands for constrained and 'U' stands for unconstrained. The order
goes as loading matrix (Lambda), error variance (Psi) and isotropic (Psi),
respectively. Example, if the loading matrix (Lambda), error variance (Psi)
and isotropic are all constrained, then select 'CCC'. Options are "CCC",
"UUU", or "UCC".}

\item{sigma}{A matrix of size ((dimensionality * number of components) x
dimensionality), indicating the covariance matrix for each component.
See example.}

\item{produceImage}{A character string indicating whether or not to
produce an image. Options "Yes" or "No". Image will be produced as
'Pairs plot of log-transformed data.png" in the current working
directory.}

\item{ImageName}{A character string indicating name for image, if
produceImage is set to "Yes". Default is "TwoComponents".}
}
\value{
Returns an S3 object of class mplnDataGenerator with results.
\itemize{
\item dataset - Simulated dataset.
\item trueMembership -A numeric vector indicating the membership of
each observation.
\item probaPost - A matrix indicating the posterior probability that
each observation belong to the component/cluster.
\item truenormfactors - A numeric vector indicating the true
normalization factors used for adjusting the library sizes.
\item observations - Number of observations in the simulated dataset.
\item dimensionality - Dimensionality of the simulated dataset.
\item mixingProportions - A numeric vector indicating the mixing
proportion of each component.
\item mu - True mean used for the simulated dataset.
\item sigma - True covariances used for the simulated dataset.
}
}
\description{
This function simulates data from a mixture of multivariate
Poisson-log normal factor analyzers family (PMPLNFA). In the
PMPLNFA framework restrictions are introduced to the model
parameters with the aim of obtaining parsimonious models, which
are sufficiently flexible for clustering purposes. Since the
largest contribution of free parameters is through the covariance
matrices, it is the focus for introduction of parsimony.
}
\examples{
set.seed(100)
numDatasets <- 10 # total number of datasets to be generated
pfactors <- 3 # number of true latent factors
dimensionality <- 10 # dimensionality of observed data
G <- 2 # number of groups/clusters
mixingProportions = c(0.32, 0.68)
nObservations <- 1000 ### sample size or number of observations

mu <- list(c(6, 3, 3, 6, 3, 6, 3, 3, 6 ,3),
           c(5, 3, 5, 3, 5, 5, 3, 5, 3, 5))

Lambda <- list(matrix(runif(pfactors * dimensionality, -1, 1), nrow = dimensionality),
               matrix(runif(pfactors * dimensionality, -1, 1), nrow = dimensionality))

Psi <- list(diag(dimensionality) * runif(1),
            diag(dimensionality) * runif(1))


testing <- mplnFADataGenerator(nObservations = nObservations,
                               dimensionality = dimensionality,
                               mixingProportions = c(0.32, 0.68),
                               mu = mu,
                               Lambda = Lambda,
                               Psi = Psi,
                               trueClusters = 2,
                               pfactors = 3,
                               numDatasets = 10,
                               modelName = "CCC")

# To generate Sigma values if need
for (gvalue in 1:length(Lambda)) {
 sigma_1 <- lambda_1\%*\%t(lambda_1)+psi_1
 sigma_2 <- lambda_2\%*\%t(lambda_2)+psi_2
}


}
\references{
Aitchison, J. and C. H. Ho (1989). The multivariate Poisson-log normal distribution.
\emph{Biometrika} 76.

Silva, A. et al. (2019). A multivariate Poisson-log normal mixture model
for clustering transcriptome sequencing data. \emph{BMC Bioinformatics} 20.
\href{https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-019-2916-0}{Link}
}
